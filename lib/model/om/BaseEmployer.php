<?php

/**
 * Base class that represents a row from the 'employer' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Aug 12 17:56:38 2009
 *
 * @package    lib.model.om
 */
abstract class BaseEmployer extends BaseObject  implements Persistent {


  const PEER = 'EmployerPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        EmployerPeer
	 */
	protected static $peer;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the contact_person field.
	 * @var        string
	 */
	protected $contact_person;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the phone field.
	 * @var        string
	 */
	protected $phone;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the web field.
	 * @var        string
	 */
	protected $web;

	/**
	 * The value for the region_id field.
	 * @var        int
	 */
	protected $region_id;

	/**
	 * The value for the speciality_id field.
	 * @var        int
	 */
	protected $speciality_id;

	/**
	 * The value for the target_regions field.
	 * @var        string
	 */
	protected $target_regions;

	/**
	 * The value for the salary field.
	 * @var        int
	 */
	protected $salary;

	/**
	 * The value for the how_many_needed field.
	 * @var        int
	 */
	protected $how_many_needed;

	/**
	 * The value for the schedule field.
	 * @var        string
	 */
	protected $schedule;

	/**
	 * The value for the start_date field.
	 * @var        string
	 */
	protected $start_date;

	/**
	 * The value for the provide_place field.
	 * @var        int
	 */
	protected $provide_place;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the make_permission field.
	 * @var        int
	 */
	protected $make_permission;

	/**
	 * The value for the make_registration field.
	 * @var        int
	 */
	protected $make_registration;

	/**
	 * The value for the education field.
	 * @var        string
	 */
	protected $education;

	/**
	 * The value for the experience field.
	 * @var        string
	 */
	protected $experience;

	/**
	 * The value for the computer field.
	 * @var        string
	 */
	protected $computer;

	/**
	 * The value for the age_start field.
	 * @var        int
	 */
	protected $age_start;

	/**
	 * The value for the age_end field.
	 * @var        int
	 */
	protected $age_end;

	/**
	 * The value for the gender field.
	 * @var        int
	 */
	protected $gender;

	/**
	 * The value for the additional_info field.
	 * @var        string
	 */
	protected $additional_info;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * @var        Region
	 */
	protected $aRegion;

	/**
	 * @var        Speciality
	 */
	protected $aSpeciality;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseEmployer object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [contact_person] column value.
	 * 
	 * @return     string
	 */
	public function getContactPerson()
	{
		return $this->contact_person;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [phone] column value.
	 * 
	 * @return     string
	 */
	public function getPhone()
	{
		return $this->phone;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [web] column value.
	 * 
	 * @return     string
	 */
	public function getWeb()
	{
		return $this->web;
	}

	/**
	 * Get the [region_id] column value.
	 * 
	 * @return     int
	 */
	public function getRegionId()
	{
		return $this->region_id;
	}

	/**
	 * Get the [speciality_id] column value.
	 * 
	 * @return     int
	 */
	public function getSpecialityId()
	{
		return $this->speciality_id;
	}

	/**
	 * Get the [target_regions] column value.
	 * 
	 * @return     string
	 */
	public function getTargetRegions()
	{
		return $this->target_regions;
	}

	/**
	 * Get the [salary] column value.
	 * 
	 * @return     int
	 */
	public function getSalary()
	{
		return $this->salary;
	}

	/**
	 * Get the [how_many_needed] column value.
	 * 
	 * @return     int
	 */
	public function getHowManyNeeded()
	{
		return $this->how_many_needed;
	}

	/**
	 * Get the [schedule] column value.
	 * 
	 * @return     string
	 */
	public function getSchedule()
	{
		return $this->schedule;
	}

	/**
	 * Get the [optionally formatted] temporal [start_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getStartDate($format = 'Y-m-d')
	{
		if ($this->start_date === null) {
			return null;
		}


		if ($this->start_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->start_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->start_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [provide_place] column value.
	 * 
	 * @return     int
	 */
	public function getProvidePlace()
	{
		return $this->provide_place;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [make_permission] column value.
	 * 
	 * @return     int
	 */
	public function getMakePermission()
	{
		return $this->make_permission;
	}

	/**
	 * Get the [make_registration] column value.
	 * 
	 * @return     int
	 */
	public function getMakeRegistration()
	{
		return $this->make_registration;
	}

	/**
	 * Get the [education] column value.
	 * 
	 * @return     string
	 */
	public function getEducation()
	{
		return $this->education;
	}

	/**
	 * Get the [experience] column value.
	 * 
	 * @return     string
	 */
	public function getExperience()
	{
		return $this->experience;
	}

	/**
	 * Get the [computer] column value.
	 * 
	 * @return     string
	 */
	public function getComputer()
	{
		return $this->computer;
	}

	/**
	 * Get the [age_start] column value.
	 * 
	 * @return     int
	 */
	public function getAgeStart()
	{
		return $this->age_start;
	}

	/**
	 * Get the [age_end] column value.
	 * 
	 * @return     int
	 */
	public function getAgeEnd()
	{
		return $this->age_end;
	}

	/**
	 * Get the [gender] column value.
	 * 
	 * @return     int
	 */
	public function getGender()
	{
		return $this->gender;
	}

	/**
	 * Get the [additional_info] column value.
	 * 
	 * @return     string
	 */
	public function getAdditionalInfo()
	{
		return $this->additional_info;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = EmployerPeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [contact_person] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setContactPerson($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_person !== $v) {
			$this->contact_person = $v;
			$this->modifiedColumns[] = EmployerPeer::CONTACT_PERSON;
		}

		return $this;
	} // setContactPerson()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = EmployerPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->phone !== $v) {
			$this->phone = $v;
			$this->modifiedColumns[] = EmployerPeer::PHONE;
		}

		return $this;
	} // setPhone()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = EmployerPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [web] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setWeb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->web !== $v) {
			$this->web = $v;
			$this->modifiedColumns[] = EmployerPeer::WEB;
		}

		return $this;
	} // setWeb()

	/**
	 * Set the value of [region_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setRegionId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->region_id !== $v) {
			$this->region_id = $v;
			$this->modifiedColumns[] = EmployerPeer::REGION_ID;
		}

		if ($this->aRegion !== null && $this->aRegion->getId() !== $v) {
			$this->aRegion = null;
		}

		return $this;
	} // setRegionId()

	/**
	 * Set the value of [speciality_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setSpecialityId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->speciality_id !== $v) {
			$this->speciality_id = $v;
			$this->modifiedColumns[] = EmployerPeer::SPECIALITY_ID;
		}

		if ($this->aSpeciality !== null && $this->aSpeciality->getId() !== $v) {
			$this->aSpeciality = null;
		}

		return $this;
	} // setSpecialityId()

	/**
	 * Set the value of [target_regions] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setTargetRegions($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->target_regions !== $v) {
			$this->target_regions = $v;
			$this->modifiedColumns[] = EmployerPeer::TARGET_REGIONS;
		}

		return $this;
	} // setTargetRegions()

	/**
	 * Set the value of [salary] column.
	 * 
	 * @param      int $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setSalary($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->salary !== $v) {
			$this->salary = $v;
			$this->modifiedColumns[] = EmployerPeer::SALARY;
		}

		return $this;
	} // setSalary()

	/**
	 * Set the value of [how_many_needed] column.
	 * 
	 * @param      int $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setHowManyNeeded($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->how_many_needed !== $v) {
			$this->how_many_needed = $v;
			$this->modifiedColumns[] = EmployerPeer::HOW_MANY_NEEDED;
		}

		return $this;
	} // setHowManyNeeded()

	/**
	 * Set the value of [schedule] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setSchedule($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->schedule !== $v) {
			$this->schedule = $v;
			$this->modifiedColumns[] = EmployerPeer::SCHEDULE;
		}

		return $this;
	} // setSchedule()

	/**
	 * Sets the value of [start_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setStartDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->start_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->start_date !== null && $tmpDt = new DateTime($this->start_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->start_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = EmployerPeer::START_DATE;
			}
		} // if either are not null

		return $this;
	} // setStartDate()

	/**
	 * Set the value of [provide_place] column.
	 * 
	 * @param      int $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setProvidePlace($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->provide_place !== $v) {
			$this->provide_place = $v;
			$this->modifiedColumns[] = EmployerPeer::PROVIDE_PLACE;
		}

		return $this;
	} // setProvidePlace()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = EmployerPeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [make_permission] column.
	 * 
	 * @param      int $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setMakePermission($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->make_permission !== $v) {
			$this->make_permission = $v;
			$this->modifiedColumns[] = EmployerPeer::MAKE_PERMISSION;
		}

		return $this;
	} // setMakePermission()

	/**
	 * Set the value of [make_registration] column.
	 * 
	 * @param      int $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setMakeRegistration($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->make_registration !== $v) {
			$this->make_registration = $v;
			$this->modifiedColumns[] = EmployerPeer::MAKE_REGISTRATION;
		}

		return $this;
	} // setMakeRegistration()

	/**
	 * Set the value of [education] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setEducation($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->education !== $v) {
			$this->education = $v;
			$this->modifiedColumns[] = EmployerPeer::EDUCATION;
		}

		return $this;
	} // setEducation()

	/**
	 * Set the value of [experience] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setExperience($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->experience !== $v) {
			$this->experience = $v;
			$this->modifiedColumns[] = EmployerPeer::EXPERIENCE;
		}

		return $this;
	} // setExperience()

	/**
	 * Set the value of [computer] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setComputer($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->computer !== $v) {
			$this->computer = $v;
			$this->modifiedColumns[] = EmployerPeer::COMPUTER;
		}

		return $this;
	} // setComputer()

	/**
	 * Set the value of [age_start] column.
	 * 
	 * @param      int $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setAgeStart($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->age_start !== $v) {
			$this->age_start = $v;
			$this->modifiedColumns[] = EmployerPeer::AGE_START;
		}

		return $this;
	} // setAgeStart()

	/**
	 * Set the value of [age_end] column.
	 * 
	 * @param      int $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setAgeEnd($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->age_end !== $v) {
			$this->age_end = $v;
			$this->modifiedColumns[] = EmployerPeer::AGE_END;
		}

		return $this;
	} // setAgeEnd()

	/**
	 * Set the value of [gender] column.
	 * 
	 * @param      int $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setGender($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->gender !== $v) {
			$this->gender = $v;
			$this->modifiedColumns[] = EmployerPeer::GENDER;
		}

		return $this;
	} // setGender()

	/**
	 * Set the value of [additional_info] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setAdditionalInfo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->additional_info !== $v) {
			$this->additional_info = $v;
			$this->modifiedColumns[] = EmployerPeer::ADDITIONAL_INFO;
		}

		return $this;
	} // setAdditionalInfo()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = EmployerPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Employer The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = EmployerPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->title = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->contact_person = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->address = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->phone = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->email = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->web = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->region_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->speciality_id = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->target_regions = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->salary = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->how_many_needed = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->schedule = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->start_date = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->provide_place = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->description = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->make_permission = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->make_registration = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->education = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->experience = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->computer = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->age_start = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->age_end = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->gender = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->additional_info = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->password = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->id = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 26; // 26 = EmployerPeer::NUM_COLUMNS - EmployerPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Employer object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aRegion !== null && $this->region_id !== $this->aRegion->getId()) {
			$this->aRegion = null;
		}
		if ($this->aSpeciality !== null && $this->speciality_id !== $this->aSpeciality->getId()) {
			$this->aSpeciality = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = EmployerPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aRegion = null;
			$this->aSpeciality = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmployer:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			EmployerPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseEmployer:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmployer:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseEmployer:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			EmployerPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRegion !== null) {
				if ($this->aRegion->isModified() || $this->aRegion->isNew()) {
					$affectedRows += $this->aRegion->save($con);
				}
				$this->setRegion($this->aRegion);
			}

			if ($this->aSpeciality !== null) {
				if ($this->aSpeciality->isModified() || $this->aSpeciality->isNew()) {
					$affectedRows += $this->aSpeciality->save($con);
				}
				$this->setSpeciality($this->aSpeciality);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = EmployerPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = EmployerPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += EmployerPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRegion !== null) {
				if (!$this->aRegion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRegion->getValidationFailures());
				}
			}

			if ($this->aSpeciality !== null) {
				if (!$this->aSpeciality->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSpeciality->getValidationFailures());
				}
			}


			if (($retval = EmployerPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmployerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getTitle();
				break;
			case 1:
				return $this->getContactPerson();
				break;
			case 2:
				return $this->getAddress();
				break;
			case 3:
				return $this->getPhone();
				break;
			case 4:
				return $this->getEmail();
				break;
			case 5:
				return $this->getWeb();
				break;
			case 6:
				return $this->getRegionId();
				break;
			case 7:
				return $this->getSpecialityId();
				break;
			case 8:
				return $this->getTargetRegions();
				break;
			case 9:
				return $this->getSalary();
				break;
			case 10:
				return $this->getHowManyNeeded();
				break;
			case 11:
				return $this->getSchedule();
				break;
			case 12:
				return $this->getStartDate();
				break;
			case 13:
				return $this->getProvidePlace();
				break;
			case 14:
				return $this->getDescription();
				break;
			case 15:
				return $this->getMakePermission();
				break;
			case 16:
				return $this->getMakeRegistration();
				break;
			case 17:
				return $this->getEducation();
				break;
			case 18:
				return $this->getExperience();
				break;
			case 19:
				return $this->getComputer();
				break;
			case 20:
				return $this->getAgeStart();
				break;
			case 21:
				return $this->getAgeEnd();
				break;
			case 22:
				return $this->getGender();
				break;
			case 23:
				return $this->getAdditionalInfo();
				break;
			case 24:
				return $this->getPassword();
				break;
			case 25:
				return $this->getId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = EmployerPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getTitle(),
			$keys[1] => $this->getContactPerson(),
			$keys[2] => $this->getAddress(),
			$keys[3] => $this->getPhone(),
			$keys[4] => $this->getEmail(),
			$keys[5] => $this->getWeb(),
			$keys[6] => $this->getRegionId(),
			$keys[7] => $this->getSpecialityId(),
			$keys[8] => $this->getTargetRegions(),
			$keys[9] => $this->getSalary(),
			$keys[10] => $this->getHowManyNeeded(),
			$keys[11] => $this->getSchedule(),
			$keys[12] => $this->getStartDate(),
			$keys[13] => $this->getProvidePlace(),
			$keys[14] => $this->getDescription(),
			$keys[15] => $this->getMakePermission(),
			$keys[16] => $this->getMakeRegistration(),
			$keys[17] => $this->getEducation(),
			$keys[18] => $this->getExperience(),
			$keys[19] => $this->getComputer(),
			$keys[20] => $this->getAgeStart(),
			$keys[21] => $this->getAgeEnd(),
			$keys[22] => $this->getGender(),
			$keys[23] => $this->getAdditionalInfo(),
			$keys[24] => $this->getPassword(),
			$keys[25] => $this->getId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmployerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setTitle($value);
				break;
			case 1:
				$this->setContactPerson($value);
				break;
			case 2:
				$this->setAddress($value);
				break;
			case 3:
				$this->setPhone($value);
				break;
			case 4:
				$this->setEmail($value);
				break;
			case 5:
				$this->setWeb($value);
				break;
			case 6:
				$this->setRegionId($value);
				break;
			case 7:
				$this->setSpecialityId($value);
				break;
			case 8:
				$this->setTargetRegions($value);
				break;
			case 9:
				$this->setSalary($value);
				break;
			case 10:
				$this->setHowManyNeeded($value);
				break;
			case 11:
				$this->setSchedule($value);
				break;
			case 12:
				$this->setStartDate($value);
				break;
			case 13:
				$this->setProvidePlace($value);
				break;
			case 14:
				$this->setDescription($value);
				break;
			case 15:
				$this->setMakePermission($value);
				break;
			case 16:
				$this->setMakeRegistration($value);
				break;
			case 17:
				$this->setEducation($value);
				break;
			case 18:
				$this->setExperience($value);
				break;
			case 19:
				$this->setComputer($value);
				break;
			case 20:
				$this->setAgeStart($value);
				break;
			case 21:
				$this->setAgeEnd($value);
				break;
			case 22:
				$this->setGender($value);
				break;
			case 23:
				$this->setAdditionalInfo($value);
				break;
			case 24:
				$this->setPassword($value);
				break;
			case 25:
				$this->setId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = EmployerPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setTitle($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setContactPerson($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAddress($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setPhone($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setEmail($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setWeb($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setRegionId($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setSpecialityId($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setTargetRegions($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setSalary($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setHowManyNeeded($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setSchedule($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setStartDate($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setProvidePlace($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDescription($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setMakePermission($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMakeRegistration($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setEducation($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setExperience($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setComputer($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setAgeStart($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setAgeEnd($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setGender($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setAdditionalInfo($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setPassword($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setId($arr[$keys[25]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(EmployerPeer::DATABASE_NAME);

		if ($this->isColumnModified(EmployerPeer::TITLE)) $criteria->add(EmployerPeer::TITLE, $this->title);
		if ($this->isColumnModified(EmployerPeer::CONTACT_PERSON)) $criteria->add(EmployerPeer::CONTACT_PERSON, $this->contact_person);
		if ($this->isColumnModified(EmployerPeer::ADDRESS)) $criteria->add(EmployerPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(EmployerPeer::PHONE)) $criteria->add(EmployerPeer::PHONE, $this->phone);
		if ($this->isColumnModified(EmployerPeer::EMAIL)) $criteria->add(EmployerPeer::EMAIL, $this->email);
		if ($this->isColumnModified(EmployerPeer::WEB)) $criteria->add(EmployerPeer::WEB, $this->web);
		if ($this->isColumnModified(EmployerPeer::REGION_ID)) $criteria->add(EmployerPeer::REGION_ID, $this->region_id);
		if ($this->isColumnModified(EmployerPeer::SPECIALITY_ID)) $criteria->add(EmployerPeer::SPECIALITY_ID, $this->speciality_id);
		if ($this->isColumnModified(EmployerPeer::TARGET_REGIONS)) $criteria->add(EmployerPeer::TARGET_REGIONS, $this->target_regions);
		if ($this->isColumnModified(EmployerPeer::SALARY)) $criteria->add(EmployerPeer::SALARY, $this->salary);
		if ($this->isColumnModified(EmployerPeer::HOW_MANY_NEEDED)) $criteria->add(EmployerPeer::HOW_MANY_NEEDED, $this->how_many_needed);
		if ($this->isColumnModified(EmployerPeer::SCHEDULE)) $criteria->add(EmployerPeer::SCHEDULE, $this->schedule);
		if ($this->isColumnModified(EmployerPeer::START_DATE)) $criteria->add(EmployerPeer::START_DATE, $this->start_date);
		if ($this->isColumnModified(EmployerPeer::PROVIDE_PLACE)) $criteria->add(EmployerPeer::PROVIDE_PLACE, $this->provide_place);
		if ($this->isColumnModified(EmployerPeer::DESCRIPTION)) $criteria->add(EmployerPeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(EmployerPeer::MAKE_PERMISSION)) $criteria->add(EmployerPeer::MAKE_PERMISSION, $this->make_permission);
		if ($this->isColumnModified(EmployerPeer::MAKE_REGISTRATION)) $criteria->add(EmployerPeer::MAKE_REGISTRATION, $this->make_registration);
		if ($this->isColumnModified(EmployerPeer::EDUCATION)) $criteria->add(EmployerPeer::EDUCATION, $this->education);
		if ($this->isColumnModified(EmployerPeer::EXPERIENCE)) $criteria->add(EmployerPeer::EXPERIENCE, $this->experience);
		if ($this->isColumnModified(EmployerPeer::COMPUTER)) $criteria->add(EmployerPeer::COMPUTER, $this->computer);
		if ($this->isColumnModified(EmployerPeer::AGE_START)) $criteria->add(EmployerPeer::AGE_START, $this->age_start);
		if ($this->isColumnModified(EmployerPeer::AGE_END)) $criteria->add(EmployerPeer::AGE_END, $this->age_end);
		if ($this->isColumnModified(EmployerPeer::GENDER)) $criteria->add(EmployerPeer::GENDER, $this->gender);
		if ($this->isColumnModified(EmployerPeer::ADDITIONAL_INFO)) $criteria->add(EmployerPeer::ADDITIONAL_INFO, $this->additional_info);
		if ($this->isColumnModified(EmployerPeer::PASSWORD)) $criteria->add(EmployerPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(EmployerPeer::ID)) $criteria->add(EmployerPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(EmployerPeer::DATABASE_NAME);

		$criteria->add(EmployerPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Employer (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTitle($this->title);

		$copyObj->setContactPerson($this->contact_person);

		$copyObj->setAddress($this->address);

		$copyObj->setPhone($this->phone);

		$copyObj->setEmail($this->email);

		$copyObj->setWeb($this->web);

		$copyObj->setRegionId($this->region_id);

		$copyObj->setSpecialityId($this->speciality_id);

		$copyObj->setTargetRegions($this->target_regions);

		$copyObj->setSalary($this->salary);

		$copyObj->setHowManyNeeded($this->how_many_needed);

		$copyObj->setSchedule($this->schedule);

		$copyObj->setStartDate($this->start_date);

		$copyObj->setProvidePlace($this->provide_place);

		$copyObj->setDescription($this->description);

		$copyObj->setMakePermission($this->make_permission);

		$copyObj->setMakeRegistration($this->make_registration);

		$copyObj->setEducation($this->education);

		$copyObj->setExperience($this->experience);

		$copyObj->setComputer($this->computer);

		$copyObj->setAgeStart($this->age_start);

		$copyObj->setAgeEnd($this->age_end);

		$copyObj->setGender($this->gender);

		$copyObj->setAdditionalInfo($this->additional_info);

		$copyObj->setPassword($this->password);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Employer Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     EmployerPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new EmployerPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Region object.
	 *
	 * @param      Region $v
	 * @return     Employer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setRegion(Region $v = null)
	{
		if ($v === null) {
			$this->setRegionId(NULL);
		} else {
			$this->setRegionId($v->getId());
		}

		$this->aRegion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Region object, it will not be re-added.
		if ($v !== null) {
			$v->addEmployer($this);
		}

		return $this;
	}


	/**
	 * Get the associated Region object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Region The associated Region object.
	 * @throws     PropelException
	 */
	public function getRegion(PropelPDO $con = null)
	{
		if ($this->aRegion === null && ($this->region_id !== null)) {
			$c = new Criteria(RegionPeer::DATABASE_NAME);
			$c->add(RegionPeer::ID, $this->region_id);
			$this->aRegion = RegionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aRegion->addEmployers($this);
			 */
		}
		return $this->aRegion;
	}

	/**
	 * Declares an association between this object and a Speciality object.
	 *
	 * @param      Speciality $v
	 * @return     Employer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSpeciality(Speciality $v = null)
	{
		if ($v === null) {
			$this->setSpecialityId(NULL);
		} else {
			$this->setSpecialityId($v->getId());
		}

		$this->aSpeciality = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Speciality object, it will not be re-added.
		if ($v !== null) {
			$v->addEmployer($this);
		}

		return $this;
	}


	/**
	 * Get the associated Speciality object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Speciality The associated Speciality object.
	 * @throws     PropelException
	 */
	public function getSpeciality(PropelPDO $con = null)
	{
		if ($this->aSpeciality === null && ($this->speciality_id !== null)) {
			$c = new Criteria(SpecialityPeer::DATABASE_NAME);
			$c->add(SpecialityPeer::ID, $this->speciality_id);
			$this->aSpeciality = SpecialityPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSpeciality->addEmployers($this);
			 */
		}
		return $this->aSpeciality;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aRegion = null;
			$this->aSpeciality = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseEmployer:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseEmployer::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseEmployer
